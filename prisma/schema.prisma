generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  username      String?
  email         String        @unique
  password      String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  post          Post[]
  comment       Comment[]
  role          Roles         @default(MEMBER)
  refresh_token RefreshToken?
  subscription  Subscription?

  @@map("users")
}

model Subscription {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  endDate   DateTime
  isActive  SubscriptionStatus @default(INACTIVE)
  userId    String             @unique @db.ObjectId
  User      User               @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  body       String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String    @db.ObjectId
  upvotes    Int       @default(0)
  downvotes  Int       @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  comments   Comment[]

  @@map("posts")
}

model Comment {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  text   String
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String  @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@map("comments")
}

model RefreshToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique @db.ObjectId

  @@map("refresh_token")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

enum Roles {
  MEMBER
  ADMIN
}
